# ------------------------------------------------------------
# GitHub Action to Deploy the DNet Bot to an Azure Environment
# ------------------------------------------------------------
# 
# Modify the Environment Variables below if you want to change
# any of the default values, otherwise the following secrets
# need to be set to ensure the GitHub actions can connect and
# build into your Azure tenancy:
#
# AZURE_CREDENTIALS - The Service Principle details for Azure
# SUBSCRIPTION_ID - Your Subscription ID

name: DeployDNetBot

on:
    push:
        branches: [ main, development ]
    pull_request:
        branches: [ main ]

# Configuration Items
# -------------------
# These Variables Change based on the Environment you are 
# deploying to. You also need to set the secrets above.
env:
    DNETBOT_NAME: 'dnetbot'                                                         # DNet Bot Naming Prefix for Resources (Lowercase, No Spaces or Special Characters)
    DOTNET_VERSION: '3.1.403'                                                       # SDK Version to use
    AZURE_LOCATION: 'eastus'                                                        # Resource Location
    AZURE_RG: 'RG-DNet-Bot'                                                         # Resource Group Name to use
    AZURE_WEB_SKU: 'B1'                                                             # Size of the WebApp to deploy

jobs:
    deploy-azure-infrastructure:
        name: 'Deploy Azure Infrastructure'
        runs-on: ubuntu-latest
        steps:
            # Check out the source code from the main branch
          - name: 'Check Out Main'
            uses: actions/checkout@main

          - name: Login via Azure Module                                              # Login via the Azure Module
            uses: azure/login@v1
            with:
                creds: ${{secrets.AZURE_CREDENTIALS}}
                enable-AzPSSession: true

            # Deploy Storage Components First
          - name: 'Deploy Azure Storage Components'
            uses: azure/arm-deploy@v1
            with:
                subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
                resourceGroupName: ${{ env.AZURE_RG }}
                template: ./azure-dnet-storage.json
                parameters:
                    location=${{ env.AZURE_LOCATION }}
                    storageAccountName=${{ env.DNETBOT_NAME }}storage

            # Deploy Monitoring Resources
          - name: 'Deploy Azure Monitoring Components'
            uses: azure/arm-deploy@v1
            with:
                subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
                resourceGroupName: ${{ env.AZURE_RG }}
                template: ./azure-dnet-monitoring.json
                parameters:
                    location=${{ env.AZURE_LOCATION }}
                    appInsightsName=${{ env.DNETBOT_NAME }}-insights

            # Deploy EventGrid Resources
          - name: 'Deploy Azure EventGrid Components'
            uses: azure/arm-deploy@v1
            with:
                subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
                resourceGroupName: ${{ env.AZURE_RG }}
                template: ./azure-dnet-eventgrid.json
                parameters:
                    location=${{ env.AZURE_LOCATION }}
                    eventGridName=${{ env.DNETBOT_NAME }}-eventgrid-domain

            # Deploy Function Resources
          - name: 'Deploy Azure Function Components'
            uses: azure/arm-deploy@v1
            with:
                subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
                resourceGroupName: ${{ env.AZURE_RG }}
                template: ./azure-dnet-functions.json
                parameters:
                    funcAppName=${{ env.DNETBOT_NAME }}-funcs
                    location=${{ env.AZURE_LOCATION }}
                    runtime=dotnet
                    appInsightsName=${{ env.DNETBOT_NAME }}-insights
                    appStorageName=${{ env.DNETBOT_NAME }}storage

            # Deploy WebApp Resources
          - name: 'Deploy Azure WebApp Components'
            uses: azure/arm-deploy@v1
            with:
                subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
                resourceGroupName: ${{ env.AZURE_RG }}
                template: ./azure-dnet-webapp.json
                parameters:
                    webAppName=${{ env.DNETBOT_NAME }}-proxy
                    location=${{ env.AZURE_LOCATION }}
                    sku=${{ env.AZURE_WEB_SKU }}
                    runtime=dotnet
                    appInsightsName=${{ env.DNETBOT_NAME }}-insights
                    appStorageName=${{ env.DNETBOT_NAME }}storage

    build-and-deploy:
        name: 'Build and Deploy DNet Bot'
        needs: deploy-azure-infrastructure
        runs-on: ubuntu-latest
        steps:
            # Check out the source code from the main branch
          - name: 'Check Out Main'
            uses: actions/checkout@main
    
            # Setup Dotnet Core
          - name: 'Configure DotNet Core'
            uses: actions/setup-dotnet@v1
            with:
                dotnet-version: ${{ env.DOTNET_VERSION }} 

            # Run DotNet Build and Publish for DNetBot
          - name: 'Dotnet build and publish'
            run: |
                dotnet restore
                dotnet build --configuration Release
                dotnet publish DNetBot -c Release -o './DNetBot-Release'
                dotnet publish DNetBotFunctions -c Release -o './DNetBotFunctions-Release'

          - name: Login via Azure Module                                              # Login via the Azure Module
            uses: azure/login@v1
            with:
                creds: ${{secrets.AZURE_CREDENTIALS}}
                enable-AzPSSession: true

            # Deploy the DNetBot WebApp
          - name: 'Deploy DnetBot WebApp'
            uses: azure/webapps-deploy@v2
            with:
                app-name: ${{ env.DNETBOT_NAME }}-proxy
                package: './DNetBot-Release'

          - name: Get the Function Publishing Profile
            uses: azure/CLI@v1
            env:
                FUNCTION_NAME: ${{ env.DNETBOT_NAME }}-funcs
            with:
                azcliversion: 2.14.2
                inlineScript: |
                    az functionapp deployment list-publishing-profiles --name ${{ env.FUNCTION_NAME }} --resource-group ${{ env.AZURE_RG }} --xml >> ./publish.xml

            # Deploy the DNetBot Functions
          - name: 'Run Azure Functions Action'
            uses: Azure/functions-action@v1
            id: fa
            with:
                app-name: ${{ env.DNETBOT_NAME }}-funcs
                package: './DNetBotFunctions-Release'
                publish-profile: ./publish.xml

            # Logout of Azure CLI
          - name: Logout of Azure
            run: az logout

    eventgrid-topic-creation:
        name: 'Create EventGrid Topics'
        runs-on: ubuntu-latest
        needs: [deploy-azure-infrastructure, build-and-deploy]
        steps:

          - name: Login via Azure Module                                              # Login via the Azure Module
            uses: azure/login@v1
            with:
                creds: ${{secrets.AZURE_CREDENTIALS}}
                enable-AzPSSession: true

            # Check out the source code from the main branch
          - name: 'Check Out Main'
            uses: actions/checkout@main
            # Creates all the topics in the domain to support bot events
          - name: Create Event Grid Topics
            uses: azure/CLI@v1
            env:
                EVENTGRID_DOMAIN: ${{ env.DNETBOT_NAME }}-eventgrid-domain
            with:
                azcliversion: 2.14.2
                inlineScript: |
                  az eventgrid domain topic create -g $AZURE_RG --domain-name $EVENTGRID_DOMAIN --name client
                  az eventgrid domain topic create -g $AZURE_RG --domain-name $EVENTGRID_DOMAIN --name bot
                  az eventgrid domain topic create -g $AZURE_RG --domain-name $EVENTGRID_DOMAIN --name channel
                  az eventgrid domain topic create -g $AZURE_RG --domain-name $EVENTGRID_DOMAIN --name guild
                  az eventgrid domain topic create -g $AZURE_RG --domain-name $EVENTGRID_DOMAIN --name messages
                  az eventgrid domain topic create -g $AZURE_RG --domain-name $EVENTGRID_DOMAIN --name role
                  az eventgrid domain topic create -g $AZURE_RG --domain-name $EVENTGRID_DOMAIN --name user
                  az eventgrid domain topic create -g $AZURE_RG --domain-name $EVENTGRID_DOMAIN --name returnmessage
            
            # Proxy Subscribe to the Return Topic
          - name: Subscribe Proxy to Topics
            uses: azure/CLI@v1
            env:
                SUBSCRIPTION_NAME: ${{ env.DNETBOT_NAME }}-proxy-returnmessage
                EVENTGRID_DOMAIN: ${{ env.DNETBOT_NAME }}-eventgrid-domain
                ENDPOINT_ADDRESS: ${{ env.DNETBOT_NAME }}-proxy.azurewebsites.net/api/EventGrid/ReturnMessage
                TOPIC_RESOURCE: /subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RG }}/providers/Microsoft.EventGrid/domains/${{ env.DNETBOT_NAME }}-eventgrid-domain/topics/returnmessage
            with:
                azcliversion: 2.0.72
                inlineScript: |
                  az eventgrid event-subscription create --name $SUBSCRIPTION_NAME --source-resource-id $TOPIC_RESOURCE --endpoint $ENDPOINT_ADDRESS

            # Function Subscribe to the Message Topic
          - name: Subscribe Proxy to Topics
            uses: azure/CLI@v1
            env:
                SUBSCRIPTION_NAME: ${{ env.DNETBOT_NAME }}-function-messages-new
                EVENTGRID_DOMAIN: ${{ env.DNETBOT_NAME }}-eventgrid-domain
                ENDPOINT_ADDRESS: /subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RG }}/providers/Microsoft.Web/sites/${{ env.DNETBOT_NAME }}-funcs/functions/NewMessageEvent
                TOPIC_RESOURCE: /subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RG }}/providers/Microsoft.EventGrid/domains/${{ env.DNETBOT_NAME }}-eventgrid-domain/topics/messages
            with:
                azcliversion: 2.0.72
                inlineScript: |
                  az eventgrid event-subscription create --name $SUBSCRIPTION_NAME --source-resource-id $TOPIC_RESOURCE --endpoint $ENDPOINT_ADDRESS --endpoint-type azurefunction
            
            # Logout of Azure CLI
          - name: Logout of Azure
            run: az logout
